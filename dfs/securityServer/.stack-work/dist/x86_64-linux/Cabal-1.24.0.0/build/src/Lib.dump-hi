
==================== FINAL INTERFACE ====================
2016-12-08 15:35:34.077421 UTC

interface securityServer-0.1.0.0-9XLddLaAHKhFXLsvzYRjA3:Lib 8001
  interface hash: d8dd1c384ed72f3cd3310a99ed03336b
  ABI hash: 3d59381a8db8aab37e23c6a61ce36992
  export-list hash: eb409e3afdca7b6e12d5af0f2f1d5ace
  orphan hash: 8b5eba22f17279474ccd25df2114d63e
  flag hash: 6d08b9db3d1e89bf10ee0a560d90b6f4
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.startApp
module dependencies:
package dependencies: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov
                      aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz
                      appar-0.1.4@appar-0.1.4-1in4Ewd8JBkAYDZSWXLSe0
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1@async-2.1.1-xFiBzw9xoB8HPZAuxUY2o
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR
                      auto-update-0.1.4@auto-update-0.1.4-GAesfFmqoZzBz6e09kRyzb
                      base-4.9.0.0
                      base-compat-0.9.1@base-compat-0.9.1-tmPpmtbHbvIDjFWbkjGrR
                      base16-bytestring-0.1.1.6@base16-bytestring-0.1.1.6-5dPoF8dzhwzBaEB2MvnmIS
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-In9M41tLtcS9QYt3QpGpNY
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-KWDLbdBYSBoALiMW0LHIz1
                      blaze-html-0.8.1.3@blaze-html-0.8.1.3-8MBPJsFNBtBBD2gWERenva
                      blaze-markup-0.7.1.1@blaze-markup-0.7.1.1-IE161DWDHNXF9O8bBguli5
                      bson-0.3.2.3@bson-0.3.2.3-3QA3aP5EtCyCltXUzEKOsQ
                      byteable-0.1.1@byteable-0.1.1-15aIBCArSOBEnGxArzrDTM
                      byteorder-1.0.4@byteorder-1.0.4-BbL4c17EpZrL9PcZm0xys9
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      bytestring-conversion-0.3.1@bytestring-conversion-0.3.1-EvX949he2UAKBbGbE7IZfu
                      case-insensitive-1.2.0.7@case-insensitive-1.2.0.7-FlqweN7AuKj9EdU2arVEt4
                      cipher-aes-0.2.11@cipher-aes-0.2.11-6IDqXzfBW6B3WK2bKJbiBh
                      containers-0.5.7.1@containers-0.5.7.1
                      cprng-aes-0.6.1@cprng-aes-0.6.1-COLYQrn2KP0KrG5tq2u9OS
                      crypto-cipher-types-0.0.9@crypto-cipher-types-0.0.9-Iwzx9devSK6HQoOjujg46u
                      crypto-random-0.0.9@crypto-random-0.0.9-GQAZIw8UH93GFERaAFFYYo
                      cryptohash-0.11.9@cryptohash-0.11.9-9KNu0EEbreBFrmNJAeHgYz
                      cryptonite-0.19@cryptonite-0.19-G9PYO4oOEqhDTta2u9rAaU
                      data-binary-ieee754-0.4.4@data-binary-ieee754-0.4.4-F1HjhwdV1xx5grS0eMjeg2
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.2.6.2@directory-1.2.6.2
                      dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv
                      double-conversion-2.0.1.0@double-conversion-2.0.1.0-GBJeLbJOvPcIufCPOIwofV
                      file-embed-0.0.10@file-embed-0.0.10-IXfudWSq57y1Athysk5ifZ
                      filepath-1.4.1.0@filepath-1.4.1.0
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G
                      hashtables-1.2.1.0@hashtables-1.2.1.0-97BixhaJIWTIDAaThqJujl
                      http-api-data-0.2.4@http-api-data-0.2.4-3jwS7OrPl3l4oJfG3gRZ5C
                      http-date-0.0.6.1@http-date-0.0.6.1-150spKQYCuoIrltdbMmYGs
                      http-media-0.6.4@http-media-0.6.4-82jDVCpdN5H696EFF5l5I4
                      http-types-0.9.1@http-types-0.9.1-8WdUZL4twHzANJbxvb1Aoj
                      http2-1.6.2@http2-1.6.2-8AbNCX9FS8K1gUe78Emp1g integer-gmp-1.0.0.1
                      iproute-1.7.1@iproute-1.7.1-9hsGfRvggCmFA0ueZi5Sd9
                      lifted-base-0.2.3.8@lifted-base-0.2.3.8-KLkd0w1UJqu6nE8oVTTEBy
                      memory-0.13@memory-0.13-ABHR5331zHK9scHPRr7afU
                      mime-types-0.1.0.7@mime-types-0.1.0.7-AxQ64wFjikqCSdK5pSeZvh
                      mmorph-1.0.9@mmorph-1.0.9-DmSwQqk5nLj7roLAcydGz
                      monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT
                      mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2
                      nonce-1.0.2@nonce-1.0.2-187zSgt2OIA84d9i9xgwRX
                      parsec-3.1.11@parsec-3.1.11-BCos4GEVCuDB8dnOCBHO6X
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      psqueues-0.2.2.3@psqueues-0.2.2.3-YN2xKllZOMJLtAgRHlkEw
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      random-shuffle-0.0.4@random-shuffle-0.0.4-LfeDYNPfwrQ2o9p6tw2M9l
                      scientific-0.3.4.9@scientific-0.3.4.9-6oTYuCcx6H5BsTGU7D2Gk3
                      securemem-0.1.9@securemem-0.1.9-AlUbMorzPNe4lwnV15ASIa
                      servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc
                      servant-server-0.8.1@servant-server-0.8.1-K0euN04vPTa45wy4acLZH0
                      simple-sendfile-0.2.25@simple-sendfile-0.2.25-FZS0Stqtwd5AOyFRQgM4IV
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      streaming-commons-0.1.16@streaming-commons-0.1.16-KtRawhq8O97EWCabefpk66
                      string-conversions-0.4@string-conversions-0.4-8T0UFmRDEly2gsNJzmHrNQ
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-1j5dGjxxtiTDuAsO86iSk0
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-base-0.4.4@transformers-base-0.4.4-25SoAegOdaF8rLEnnb5jPI
                      unix-2.7.2.0@unix-2.7.2.0
                      unix-compat-0.4.2.0@unix-compat-0.4.2.0-GNHotEMWE5dJ4oYFhgibIV
                      unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW
                      utf8-string-1.0.1.1@utf8-string-1.0.1.1-2T8mBCuEDlXDo8zed8Onw4
                      vault-0.3.0.6@vault-0.3.0.6-CA9Xj82tAPe9nD32xVMgDG
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
                      wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW
                      wai-app-static-3.1.6.1@wai-app-static-3.1.6.1-I87kXUnC7uoJHoj38CLHrC
                      warp-3.2.9@warp-3.2.9-GXzPTh1481F3R0zZxzj1WW
                      word8-0.1.2@word8-0.1.2-2E1SgvvAV2fK8vZPDHbRan
                      zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV
orphans: MonadRandom-0.4.2.3@MonadRandom-0.4.2.3-8TfCm6PGvGYB7omozORhov:Control.Monad.Random
         aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Generic
         aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.Types.Instances
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Text.Internal
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-EMu4H7FB10MAl6hwKw992G:Data.Hashable.Generic
         mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN:Database.MongoDB.Internal.Util
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-5Olk1S76r1CDYzFS6V3sZR:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.List.NonEmpty
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Semigroup
                         base-4.9.0.0:Data.Type.Equality base-4.9.0.0:Data.Version
                         base-4.9.0.0:Data.Void base-4.9.0.0:GHC.Exts
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.2@dlist-0.8.0.2-GWAMmbX9rLg3tqrbOizHGv:Data.DList
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         iproute-1.7.1@iproute-1.7.1-9hsGfRvggCmFA0ueZi5Sd9:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-9hsGfRvggCmFA0ueZi5Sd9:Data.IP.Range
                         monad-control-1.0.1.0@monad-control-1.0.1.0-HoNEBoNfniX3vjSfkI7WTT:Control.Monad.Trans.Control
                         network-uri-2.6.1.0@network-uri-2.6.1.0-DDHh2FNiPirBRgkuU9DEt2:Network.URI
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.ContentTypes
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.API.Verbs
                         servant-0.8.1@servant-0.8.1-C41nqWozRFwEkLnlLTnUQc:Servant.Utils.Links
                         servant-server-0.8.1@servant-server-0.8.1-K0euN04vPTa45wy4acLZH0:Servant.Server.Internal
                         servant-server-0.8.1@servant-server-0.8.1-K0euN04vPTa45wy4acLZH0:Servant.Server.Internal.BasicAuth
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text
                         text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unordered-containers-0.2.7.1-Eo9jd5DMz45DhBLCG8skzW:Data.HashSet
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Storable
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-4CWLN1T27kOJhNvXgy46ZV:Codec.Compression.Zlib.Stream
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson 94b59824488f369f190c261b6e39e7ba
import  -/  aeson-0.11.2.1@aeson-0.11.2.1-5ZQWuTFmffALcfpzDCXoOz:Data.Aeson.TH 869262ef224a0287f5d5fc093506acd2
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Control.Monad.IO.Class d702028d883e700bd7066b031147030d
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Generics 8e2a7658e8b966c1d29d0d5fd4129f38
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO eb1d40aa793a4047069a5023f2ebcfe3
import  -/  bson-0.3.2.3@bson-0.3.2.3-3QA3aP5EtCyCltXUzEKOsQ:Data.Bson 609b35b07f554dfa69c4b31dfeed380e
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN:Database.MongoDB 2f74f1157c9bd4aada7bc55dbcb0be00
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN:Database.MongoDB.Connection 1ca48cbfe54c5673e2ae808016ab1ee0
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN:Database.MongoDB.Internal.Protocol 2b680fd5e20e13b4e86e99b75df577ba
import  -/  mongoDB-2.1.1.1@mongoDB-2.1.1.1-5wYXyk7zdwHHB6m4bwUEQN:Database.MongoDB.Query 11154b7ccce00f58189d815abaac6794
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.Trans 0a058c68d8234a5f23a0f2e61a261faf
import  -/  servant-server-0.8.1@servant-server-0.8.1-K0euN04vPTa45wy4acLZH0:Servant 90a21443b9bcd78bfc4a5ddf791c82dd
import  -/  text-1.2.2.1@text-1.2.2.1-5QpmrLQApEZ4Ly9nMHWY0s:Data.Text 6515f3179e27a91345842b6e634f584c
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Except 71b1d86204f6908788cb5223e3c73193
import  -/  wai-3.2.1.1@wai-3.2.1.1-f77bMYZGLQBAD3XJrvGiW:Network.Wai f10fb472d685284a8637bf34e58bc7f2
import  -/  warp-3.2.9@warp-3.2.9-GXzPTh1481F3R0zZxzj1WW:Network.Wai.Handler.Warp 889486c28299135fca865dcd9b9b73e7
bf9492ecd4403b3c5348efb638ad9124
  $fEqUser :: GHC.Classes.Eq Lib.User
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:. @ Lib.User Lib.$fEqUser_$c== Lib.$fEqUser_$c/= -}
bf9492ecd4403b3c5348efb638ad9124
  $fEqUser_$c/= :: Lib.User -> Lib.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.User) (w1 :: Lib.User) ->
                 case w of ww { Lib.User ww1 ww2 ->
                 case w1 of ww3 { Lib.User ww4 ww5 ->
                 Lib.$w$c/= ww1 ww2 ww4 ww5 } }) -}
bf9492ecd4403b3c5348efb638ad9124
  $fEqUser_$c== :: Lib.User -> Lib.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.User) (w1 :: Lib.User) ->
                 case w of ww { Lib.User ww1 ww2 ->
                 case w1 of ww3 { Lib.User ww4 ww5 ->
                 Lib.$w$c== ww1 ww2 ww4 ww5 } }) -}
bf9492ecd4403b3c5348efb638ad9124
  $fShowUser :: GHC.Show.Show Lib.User
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.User
                  Lib.$fShowUser_$cshowsPrec
                  Lib.$fShowUser_$cshow
                  Lib.$fShowUser_$cshowList -}
bf9492ecd4403b3c5348efb638ad9124
  $fShowUser1 :: Lib.User -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.User) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.User ww1 ww2 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
1ca8292cce72f7c9b5a2e4a51ccaa216
  $fShowUser2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
c2580aff6e3f930141b02e286068daab
  $fShowUser3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "password = "#) -}
dbab7cbbd48143a655651c7305d6b261
  $fShowUser4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
9aed97a5c686de25604fd748d9134aea
  $fShowUser5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "username = "#) -}
808c652d7b60f4bfe17d59e08d80d79d
  $fShowUser6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "User {"#) -}
bf9492ecd4403b3c5348efb638ad9124
  $fShowUser_$cshow :: Lib.User -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.User) ->
                 Lib.$fShowUser_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf9492ecd4403b3c5348efb638ad9124
  $fShowUser_$cshowList :: [Lib.User] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.User Lib.$fShowUser1) -}
bf9492ecd4403b3c5348efb638ad9124
  $fShowUser_$cshowsPrec ::
    GHC.Types.Int -> Lib.User -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Lib.User) (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.User ww3 ww4 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
11be6fc05172186f44e8e4bf2d9229d0
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Lib.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative
                     @ r)
                  (\ @ a (eta :: a) (eta1 :: r) ->
                   GHC.Base.const
                     @ (GHC.Types.IO a)
                     @ r
                     (GHC.Base.returnIO @ a eta)
                     eta1)
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N))
                  (Lib.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*>
                     @ GHC.Types.IO
                     @ r
                     Lib.$s$fApplicativeReaderT_$dApplicative)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*
                     @ GHC.Types.IO
                     @ r
                     Lib.$s$fApplicativeReaderT_$dApplicative) -}
2f594745a189406e75253976f04867a5
  $s$fApplicativeReaderT_$dApplicative ::
    GHC.Base.Applicative GHC.Types.IO
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Base.$fApplicativeIO -}
f23c310348d509186d4fbca4ac2d4f7d
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.$fApplicativeIO_$sap
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ (a -> b)
                         f
                         r1)
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         v
                         r1))) -}
2483033f248efccd1a7527ab8828c8d5
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT -}
798906ef623f34af6b1f11938a91e27d
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r)
                  (Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ @ r) -}
20cb5273a5afa04c54329c778cbe8c34
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r
                   @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (eta2 :: r) ->
                 let {
                   f :: b -> a {- Arity: 1 -} = \ (ds :: b) -> eta
                 } in
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> GHC.Types.IO a)
                    @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                    (\ (tpl :: r -> GHC.Types.IO a) -> tpl)
                      `cast`
                    (<r -> GHC.Types.IO a>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <GHC.Types.IO>_R <a>_N))
                    (let {
                       g :: r -> GHC.Types.IO b
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ GHC.Types.IO
                           @ b
                           eta1
                     } in
                     (\ (x :: r)
                        (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap @ b @ a f (g x))
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        eta3)
                       `cast`
                     (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                   eta2)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
5321f420ffe05f7c9092d1ed66deac22
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: a -> b)
                   (eta :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (eta1 :: r) ->
                 (GHC.Base.$
                    @ 'GHC.Types.PtrRepLifted
                    @ (r -> GHC.Types.IO b)
                    @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                    (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                      `cast`
                    (<r -> GHC.Types.IO b>_R
                     ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                    (let {
                       g :: r -> GHC.Types.IO a
                       = Control.Monad.Trans.Reader.runReaderT
                           @ r
                           @ *
                           @ GHC.Types.IO
                           @ a
                           eta
                     } in
                     (\ (x :: r)
                        (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      (GHC.Base.$fFunctorIO_$cfmap @ a @ b f (g x))
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta2)
                       `cast`
                     (<r>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))))
                   `cast`
                 (Control.Monad.Trans.Reader.N:ReaderT[0]
                      <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                   eta1)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
a8e3e99bff6fbe22d715d14a27718732
  $s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Lib.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r)
                  (Lib.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r)
                  (Lib.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r)
                  (Lib.$s$fMonadReaderT_$s$fMonadReaderT_$creturn @ r)
                  (Lib.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r) -}
58b70f6a1ecf6c4d5d14d5dd85c0b37f
  $s$fMonadReaderT_$s$fMonadReaderT_$c>> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         k
                         r1))) -}
9a982323c646cfb99051502c735b9479
  $s$fMonadReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (r -> GHC.Types.IO b)
                   @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (\ (tpl :: r -> GHC.Types.IO b) -> tpl)
                     `cast`
                   (<r -> GHC.Types.IO b>_R
                    ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N <r>_R <GHC.Types.IO>_R <b>_N))
                   (\ (r1 :: r) ->
                    GHC.Base.bindIO
                      @ a
                      @ b
                      (Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ a
                         m1
                         r1)
                      (\ (a1 :: a) ->
                       Control.Monad.Trans.Reader.runReaderT
                         @ r
                         @ *
                         @ GHC.Types.IO
                         @ b
                         (k a1)
                         r1))) -}
9db012e2977d0f731150b28458f57638
  $s$fMonadReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, Strictness: <B,U><B,A><B,U>x,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   eta :: GHC.Types.IO a = GHC.Base.$fMonadIO_$cfail @ a msg
                 } in
                 (\ (eta1 :: r) -> GHC.Base.const @ (GHC.Types.IO a) @ r eta eta1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
54a9ea49100fe8b4a03e05f43ea8e2d6
  $s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Lib.$s$fApplicativeReaderT -}
fa167751861c1508f1df77de66159736
  $s$fMonadReaderT_$s$fMonadReaderT_$creturn ::
    a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ r
                   @ a
                   (eta :: a)
                   (eta1 :: r)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO @ a eta) `cast` (GHC.Types.N:IO[0] <a>_R) eta2)
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Trans
                          (<r>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                          (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                    <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
420f41215f8fd206bd8eb51710851b00
  $tc'User :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7793156046264863712##
                   3505304821148717683##
                   Lib.$trModule
                   Lib.$tc'User1) -}
96d3675d084c07d8c0c244747a91deb0
  $tc'User1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'User"#) -}
5f263159fbef02a9ff279275efea400d
  $tcUser :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9490572056321360559##
                   13380785229545426601##
                   Lib.$trModule
                   Lib.$tcUser1) -}
34423026765299a639d48020f6790c4f
  $tcUser1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "User"#) -}
c843de332a8519321dc421c23aa21af6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
7f54d7bfe3edc08b4bd94bf95bb9353d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
e69a1af08e87c756ff63ffc0f4c0a6b0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "securityServer-0.1.0.0-9XLddLaAHKhFXLsvzYRjA3"#) -}
beeee188eac193effeef44fd94b3f6cf
  $w$c/= ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
2e65c919e548ac96b29aa4d851cdbacb
  $w$c== ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Base.eqString ww1 ww3 }) -}
ebd02e1e5adbd70b14712bc26d5035e7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Lib.$fShowUser6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Lib.$fShowUser5
                          (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows8
                             (GHC.Show.showLitString
                                ww1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.shows8
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Lib.$fShowUser4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Lib.$fShowUser3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            (GHC.Show.showLitString
                                               ww2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows8
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Lib.$fShowUser2
                                                     x))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
bf9492ecd4403b3c5348efb638ad9124
  data User
    = User {username :: GHC.Base.String, password :: GHC.Base.String}
aceba3db750d9d83e23c34570946884b
  password :: Lib.User -> GHC.Base.String
  RecSel Left Lib.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.User) ->
                 case ds of wild { Lib.User ds1 ds2 -> ds2 }) -}
8ca080992ad0fe66ec01abb6170dcba6
  startApp :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.startApp1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
32ae7a6fc6cb89d632dd0fefef996eba
  startApp1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Database.MongoDB.Connection.globalConnectTimeout
                        `cast`
                      (GHC.IORef.N:IORef[0] <Database.MongoDB.Connection.Secs>_N) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Database.MongoDB.Connection.Secs
                        var#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { GHC.Types.D# ww1 ->
                 case Database.MongoDB.Connection.$wconnect'
                        ww1
                        Lib.startApp40
                        Database.MongoDB.Connection.defaultPort
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   r1 :: Database.MongoDB.Query.MongoContext {- Strictness: m -}
                   = Database.MongoDB.Query.MongoContext
                       ipv3
                       Database.MongoDB.Query.master
                       Lib.startApp39
                 } in
                 case ((Lib.startApp38 Lib.startApp11 Lib.startApp12)
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Database.MongoDB.Query.MongoContext>_R
                            <GHC.Types.IO>_R
                            <[Data.Bson.Value]>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <[Data.Bson.Value]>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case (Database.MongoDB.Query.$wfind
                         @ GHC.Types.IO
                         Control.Monad.IO.Class.$fMonadIOIO
                         Control.Monad.Trans.Control.$fMonadBaseControlIOIO
                         (GHC.Types.[] @ Database.MongoDB.Internal.Protocol.QueryOption)
                         Lib.startApp10
                         (GHC.Types.[] @ Data.Bson.Field)
                         Database.MongoDB.Query.$fSelectQuery1
                         Database.MongoDB.Query.$fSelectQuery1
                         Lib.startApp6
                         GHC.Types.False
                         Database.MongoDB.Query.$fSelectQuery1
                         (GHC.Types.[] @ Data.Bson.Field)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <Database.MongoDB.Query.Cursor>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ((Database.MongoDB.Internal.Util.$wloop
                          @ (Control.Monad.Trans.Reader.ReaderT
                               Database.MongoDB.Query.MongoContext GHC.Types.IO)
                          @ Data.Bson.Document
                          (Lib.$s$fMonadReaderT @ Database.MongoDB.Query.MongoContext)
                          (Lib.startApp5 ipv7))
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Database.MongoDB.Query.MongoContext>_R
                            <GHC.Types.IO>_R
                            <[Data.Bson.Document]>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <[Data.Bson.Document]>_R)
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.startApp4
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case Lib.startApp3 ipv9 ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case ipv3 of wild1 { Database.MongoDB.Internal.Protocol.Pipeline ds8 ds9 ds10 ds11 ->
                 case ds10 of wild2 { GHC.Conc.Sync.ThreadId tid1 ->
                 case GHC.Prim.killThread#
                        @ GHC.Exception.SomeException
                        tid1
                        Lib.startApp2
                        ipv12 of s1 { DEFAULT ->
                 case ds8 of wild3 { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.readMVar#
                        @ GHC.Prim.RealWorld
                        @ Database.MongoDB.Transport.Transport
                        mvar#
                        s1 of ds12 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild4 { Database.MongoDB.Transport.Transport ds13 ds14 ds15 ds16 ->
                 case ds16 `cast` (GHC.Types.N:IO[0] <()>_R)
                        ipv14 of ds17 { (#,#) ipv16 ipv17 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Show.$fShow()_$cshow ipv13)
                   GHC.Types.True
                   ipv16 } } } } } } } } } } } } } } } }) -}
0e360c3df082d55fd9a18d4cf3646f4d
  startApp10 :: Database.MongoDB.Query.Selection
  {- Unfolding: (Database.MongoDB.Query.Select
                   (GHC.Types.[] @ Data.Bson.Field)
                   Lib.startApp11) -}
293b5b18b049d853514531c8adbd4db4
  startApp11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "user"#) -}
0c2fc5498f1fca2ed61374a52198cca4
  startApp12 :: [Data.Bson.Document]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Document
                   Lib.startApp26
                   Lib.startApp13) -}
27e371554687fcc67b6309254cbbc1da
  startApp13 :: [Data.Bson.Document]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Document
                   Lib.startApp14
                   (GHC.Types.[] @ Data.Bson.Document)) -}
d8e30dcf66864c23c3a10cc577a2a9b5
  startApp14 :: [Data.Bson.Field]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Lib.startApp21
                   Lib.startApp15) -}
628defd17f5e1912b7766fc7904c59b8
  startApp15 :: [Data.Bson.Field]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Lib.startApp16
                   (GHC.Types.[] @ Data.Bson.Field)) -}
846a8405563ac81f8e434f39fa5d3968
  startApp16 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "password"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Lib.startApp17 }) -}
77c517ebf0e96ab614bad2810c85faab
  startApp17 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.String Lib.startApp18) -}
6c8b885efd8e18694f0622287fba2243
  startApp18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.startApp19 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a503f2d881ea63f67e2968b5df497d27
  startApp19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Data.Bson.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Data.Bson.$fValChar2
                   Lib.startApp20
                   0#
                   ipv }) -}
80a9a5c0db9f22c6f64662247adce7c5
  startApp2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionAsyncException_$ctoException
                   GHC.IO.Exception.ThreadKilled) -}
f2fc740646719e24f626a8f1734ef371
  startApp20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pwd_albert"#) -}
35df2b94162c0b31625faab6d5a63312
  startApp21 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "password"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Lib.startApp22 }) -}
148a75a0a0d92bd0ae8c48741eac1aeb
  startApp22 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.String Lib.startApp23) -}
aeea4a0b6e3871091b1982bcdb2cdf3e
  startApp23 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.startApp24 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
fa82a326c054ef01e5fbadb9f4e3bfab
  startApp24 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Data.Bson.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Data.Bson.$fValChar2
                   Lib.startApp25
                   0#
                   ipv }) -}
40ddfd989c52194d94bc43c4d2c3b55c
  startApp25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "albert"#) -}
1ea953fa6bad69e591945e1b1c3d59da
  startApp26 :: [Data.Bson.Field]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Lib.startApp33
                   Lib.startApp27) -}
511cfe3352bb4b39e71175addbc45996
  startApp27 :: [Data.Bson.Field]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Lib.startApp28
                   (GHC.Types.[] @ Data.Bson.Field)) -}
cbbe7c0d682a1b403f475d75552fa0bd
  startApp28 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "password"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Lib.startApp29 }) -}
808e7a38da568bd798ed0c4b49d6b7dd
  startApp29 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.String Lib.startApp30) -}
bc65b10eadb16603f98154041982e911
  startApp3 ::
    [Data.Bson.Document]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
5c137c05ec8e26ff1d5282b5dd4784fa
  startApp30 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.startApp31 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
73e15275380dbe7d3d7e600cbf7e9cbe
  startApp31 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Data.Bson.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Data.Bson.$fValChar2
                   Lib.startApp32
                   0#
                   ipv }) -}
7ef764f30585d5a70eab40aa72a97e82
  startApp32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pwd_isaac"#) -}
c00fe85075b5594be4ee928769e01268
  startApp33 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "username"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Lib.startApp34 }) -}
aba221504a20724d89112c4450248883
  startApp34 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.String Lib.startApp35) -}
b88e5c3a6198915742a699b3b7e9186d
  startApp35 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        Lib.startApp36 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
d56a7d67f746cb150033944d0c29d51a
  startApp36 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        8#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Data.Bson.$wouter
                   (Data.Text.Array.MArray @ GHC.Prim.RealWorld ipv1)
                   Data.Bson.$fValChar2
                   Lib.startApp37
                   0#
                   ipv }) -}
3dd822a57894b40836e893b8068af5ff
  startApp37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "isaac"#) -}
95de3109b04adb7905a944d84a4d5ebb
  startApp38 ::
    Database.MongoDB.Query.Collection
    -> [Data.Bson.Document]
    -> Database.MongoDB.Query.Action GHC.Types.IO [Data.Bson.Value]
  {- Unfolding: (Database.MongoDB.Query.insert'
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   (GHC.Types.[]
                      @ Database.MongoDB.Internal.Protocol.InsertOption)) -}
972ad250c5db5aebbbc60210aaf9b517
  startApp39 :: Database.MongoDB.Query.Database
  {- Unfolding: (Data.Text.Show.unpackCString# "users"#) -}
5a8facdac2101f5a758b9281bd805333
  startApp4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "All files and their respective server location"#) -}
b8fa0251bd3658215b05631c5bf7cd99
  startApp40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "127.0.0.1"#) -}
1c894a9968f994f4213bf859ed7a75bf
  startApp5 ::
    Database.MongoDB.Query.Cursor
    -> Database.MongoDB.Query.Action
         GHC.Types.IO (GHC.Base.Maybe Data.Bson.Document)
  {- Unfolding: (Database.MongoDB.Query.next
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO
                   Control.Monad.Trans.Control.$fMonadBaseControlIOIO) -}
107843313c6d43d4884e02b40769dd1d
  startApp6 :: [Data.Bson.Field]
  {- Unfolding: (GHC.Types.:
                   @ Data.Bson.Field
                   Lib.startApp7
                   (GHC.Types.[] @ Data.Bson.Field)) -}
e8417cc334c4042b1553066fbb509255
  startApp7 :: Data.Bson.Field
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "username"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Bson.:= dt Lib.startApp8 }) -}
6721a957148a5e4bd59933fa4b02e091
  startApp8 :: Data.Bson.Value
  {- Unfolding: (Data.Bson.$fValInteger_$cval Lib.startApp9) -}
f6c1123d1d7ff75017ffc47cec11eca7
  startApp9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2d6bfda654ccfe527fd2bca8c9a40321
  username :: Lib.User -> GHC.Base.String
  RecSel Left Lib.User
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Lib.User) ->
                 case ds of wild { Lib.User ds1 ds2 -> ds1 }) -}
instance GHC.Classes.Eq [Lib.User] = Lib.$fEqUser
instance GHC.Show.Show [Lib.User] = Lib.$fShowUser
"SPEC/Lib $fApplicativeReaderT @ IO _" [ALWAYS] forall @ r
                                                       ($dApplicative :: GHC.Base.Applicative
                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  $dApplicative
  = Lib.$s$fApplicativeReaderT @ r
"SPEC/Lib $fApplicativeReaderT_$c<*> @ IO _" [ALWAYS] forall @ r
                                                             ($dApplicative :: GHC.Base.Applicative
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Lib.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/Lib $fApplicativeReaderT_$cp1Applicative @ IO _" [ALWAYS] forall @ r
                                                                       ($dApplicative :: GHC.Base.Applicative
                                                                                           GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cp1Applicative @ GHC.Types.IO
                                                                  @ r
                                                                  $dApplicative
  = Lib.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$cp1Applicative
      @ r
"SPEC/Lib $fFunctorReaderT @ IO _" [ALWAYS] forall @ r
                                                   ($dFunctor :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO
                                              @ r
                                              $dFunctor
  = Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r
"SPEC/Lib $fFunctorReaderT_$c<$ @ IO _" [ALWAYS] forall @ r
                                                        ($dFunctor :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ @ r
"SPEC/Lib $fFunctorReaderT_$cfmap @ IO _" [ALWAYS] forall @ r
                                                          ($dFunctor :: GHC.Base.Functor
                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Lib.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Lib $fMonadReaderT @ IO _" [ALWAYS] forall @ r
                                                 ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO
                                            @ r
                                            $dMonad
  = Lib.$s$fMonadReaderT @ r
"SPEC/Lib $fMonadReaderT_$c>> @ IO _" [ALWAYS] forall @ r
                                                      ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>> @ GHC.Types.IO
                                                 @ r
                                                 $dMonad
  = Lib.$s$fMonadReaderT_$s$fMonadReaderT_$c>> @ r
"SPEC/Lib $fMonadReaderT_$c>>= @ IO _" [ALWAYS] forall @ r
                                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Lib.$s$fMonadReaderT_$s$fMonadReaderT_$c>>= @ r
"SPEC/Lib $fMonadReaderT_$cfail @ IO _" [ALWAYS] forall @ r
                                                        ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Lib.$s$fMonadReaderT_$s$fMonadReaderT_$cfail @ r
"SPEC/Lib $fMonadReaderT_$cp1Monad @ IO _" [ALWAYS] forall @ r
                                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cp1Monad @ GHC.Types.IO
                                                      @ r
                                                      $dMonad
  = Lib.$s$fMonadReaderT_$s$fMonadReaderT_$cp1Monad @ r
"SPEC/Lib $fMonadReaderT_$creturn @ IO _" [ALWAYS] forall @ r
                                                          ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$creturn @ GHC.Types.IO
                                                     @ r
                                                     $dMonad
  = Lib.$s$fMonadReaderT_$s$fMonadReaderT_$creturn @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

